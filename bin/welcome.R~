# File seqSerotyper.R
# Author: Andries J. van Tonder 
#
# Copyright (C) 2016 University of Oxford
#
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
#  This is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this software package; if not, write to the
# Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
# Boston, MA  02110-1301  USA

help <- paste(
  "",
  "seqSerotyper.R assigns serotypes to pneumococcal WGS",
  "Author: Andries J. van Tonder",
  "",
  "Usage: Rscript seqSerotyper.R -dataFile -srcDir",
  "	e.g. Rscript seqSerotyper.R -dataFile pneumo_fasta_ids.txt -srcDir /home/user/Software/avt_scripts/seqSerotyper/bin",
  "",
  "Options:",
  "",
  "-dataFile",
  " The path of a file containing sample ids and file paths to fasta files",
  "-srcDir",
  " Path of the directory that contains the reference files and related scripts",
  "",
  sep="\n"
)

######################  
## Load seqinr library
######################

library(seqinr)

###################
## Define functions
###################

####################################################
## Format the dir appropriately.
## @dir: The directory path to be formated properly.
####################################################
formatDir = function(dir = NULL){
  dirLength = nchar(dir)
  if(substr(dir, dirLength, dirLength) !='/'){
    dir = paste(dir,"/",sep="")
  }
  return(dir)
}

################################################
## checkExist: checks file paths exist
## @filePath: the path of the file to be checked
################################################

checkExist <- function(filePath = NULL){
  message(filePath)
  message(class(filePath))
	doesNotExist = which(!file.exists(filePath))
  message("Done!")
	if(length(doesNotExist) > 0){
		stop(paste("The file", filePath[doesNotExist]," does not exist!", collapse="\n", sep=""))
	}
}

####################################################
## Turn command line inputs into a n x 2 matrix
## @args: A string vector of command line arguments.
####################################################
getCommandLineInputMatrix = function(args = NULL){
  argsCount = length(args)/2
  inputs = matrix(nrow=argsCount, ncol=2)
  inputs[,1] = args[c(1:argsCount)*2 -1]
  
  if(length(which(regexpr("-",inputs[,1]) != 1)) > 0){
    stop("Argument names must start with '-'! E.g. -dataFile.")
  }
  
  inputs[,1] = gsub("-", "", inputs[,1])
  inputs[,2] = args[c(1:argsCount)*2]
  return(inputs)
  
}

#####################################################################################
## Extract input arguments.
## @argName: Name of the argument to be extracted
## @commandLineInputs: A n x 2 matrix, where n is the number of command line inputs.
## @default: default value of the input argument if not provided
## The first column of the matrix contains the names of the arguments, and the second
## column contains the arguments values.
#####################################################################################
extractInputArgument = function(argName = NULL, commandLineInputs = NULL,
                                default = NULL, canBeNULL = FALSE){
  
  argIndex = which(commandLineInputs[,1] == argName)
  argIndexCount = length(argIndex)
  if(argIndexCount == 0){
    if(canBeNULL | !is.null(default)){
      return(default)
    }else{
      stop(paste(c("The argument", argName, "must be specified!"), collapse=" "))
    }
  }else if(argIndexCount > 1){
    stop(paste(c("The argument", argName, "has been specified multiple times!"), collapse=" "))
  }else{
    return(commandLineInputs[argIndex,2])
  }
  
}

###########################################################################
## RunBlat: runs blat using appropriate query and reference sequences
## @querySeqs: sequence/s to be compared against reference sequence
## @refNuc: reference sequence against which query sequences compared
## @blatOutput: name/s of blat output files in standard blast output format
###########################################################################

RunBlat <- function(querySeqs, refNuc, blatOutput) {
  system2("blat",args=c("-t=dna",querySeqs,"-q=dna", refNuc, blatOutput,"out=blast"))
}

###########################################################################
## RunBlatBlast8: runs blat using appropriate query and reference sequences
## @querySeqs: sequence/s to be compared against reference sequence
## @refNuc: reference sequence against which query sequences compared
## @blatOutput: name/s of blat output files in blast8 output format
###########################################################################

RunBlatBlast8 <- function(querySeqs, refNuc, blatOutput) {
  system2("blat",args=c("-t=dna",querySeqs,"-q=dna", refNuc, blatOutput,"out=blast8"))
}

#############################################################################
## RunBlastall: runs blastall using appropriate query and reference sequences
## @BARef: reference sequence against which query sequences compared
## @BAquerySeqs: sequence/s to be compared against reference sequence
## @blastAllOut: names of blastall output files
#############################################################################
  
RunBlastall <- function(BARef, BAquerySeqs, blastAllOut) {
  system2("blastall",args=c("-p blastn", "-d", BARef, "-i",BAquerySeqs,"-m 8","-o",blastAllOut))
}

###########
## runMview
###########

#####################
## runSplitMultifasta
#####################

#############
## runTranseq
#############

###############################################
##  Read in the arguments from the command line
###############################################

args <- commandArgs(trailingOnly = TRUE)
if(length(args!=0)){
  if(args[1]=="-help" | args[1]=="-h"){
    cat(help,sep="\n")
    q("no")
  }
}

if((length(args)%%2)!=0 | length(args)==0) {
  cat(help,sep="\n")
  stop("\nIncorrect usage\n")
}

####################################
##  Get inputs from the command line
####################################
 
message("Arg length:")
message(length(args))
inputs <- getCommandLineInputMatrix(args = args)
message(nrow(inputs))
message(ncol(inputs))

############################
##  Input arguments required
############################

dataFilePath <- extractInputArgument(argName = "dataFile", commandLineInputs = inputs)
srcDir <- formatDir(extractInputArgument(argName = "srcDir", commandLineInputs = inputs, default = getwd()))
message("Input arguments have been read.")

###########################
## Reference files location
###########################

cat(paste0("Reference directory: ",srcDir))

#######################################
## Get the paths of the reference files
#######################################

assign11Eref <- paste(srcDir, "11A_wcjE_nuc.fas", sep="")
assign11ADref <- paste(srcDir, "11A_wcrL_nuc.fas", sep="")
assign18BCref <- paste(srcDir, "18B_18C_wciX_nuc.fas", sep="")
assign20ABref <- paste(srcDir, "20B_whaF_nuc.fas", sep="")
assign22AFref <- paste(srcDir, "22F_wcwA_nuc.fas", sep="")
assign25AFref <- paste(srcDir, "25F_wzg_nuc.fas", sep="")
assign33AFref <- paste(srcDir, "33A_33F_wcjE_nuc.fas", sep="")
assign37ref <- paste(srcDir, "37_tts_nuc.fas", sep="")
assign6ABref <- paste(srcDir, "6A_6B_wciP_nuc.fas", sep="")
assign6CEGref <- paste(srcDir, "6A_6B_wzy_nuc.fas", sep="")
assign6Fref <- paste(srcDir, "6A_wciN_alpha_nuc.fas", sep="")
assign6CDref <- paste(srcDir, "6D_wciN_beta_nuc.fas", sep="")
assign7AFref <- paste(srcDir, "7A_7F_wcwD_nuc.fas", sep="")
assign9AVref <- paste(srcDir, "9A_9V_wcjE_nuc.fas", sep="")
mainRefPath <- paste(srcDir, "Pneumo_serotypes.fasta", sep="")
splitMultifastapath <- paste(srcDir, "split_multifasta.pl", sep="")

##############################
## Check reference files exist
###############################

checkExist(c(assign11Eref, assign11ADref, assign18BCref, assign20ABref, assign22AFref, assign25AFref, assign33AFref,
          assign37ref, assign6ABref, assign6CEGref, assign6CEGref, assign6Fref, assign6CDref, assign7AFref, assign9AVref,
          mainRefPath, splitMultifastapath))

####################
## Read in data file
####################

data.df <- read.table(file=dataFilePath, header=T, as.is=T)
fastaFile <- data.df$filePath

######################################################################
## Use blat to compare each genome sequence to serotype reference file
######################################################################

fastaFileTab <- paste(fastaFile,".tab",sep="")

for (i in 1:length(fastaFile)) {
  RunBlatBlast8(querySeqs = fastaFile[[i]], refNuc = mainRefPath, blatOutput = fastaFileTab[[i]])  
}

#############################
##  Process blat output files
#############################

blatTabOut<-NULL
for (i in 1:length(fastaFileTab)) blatTabOut[[i]] <- read.delim(fastaFileTab[i],header=F,sep="\t")

sortBlatTabOut<-NULL
for (i in 1:length(blatTabOut)) sortBlatTabOut[[i]] <- blatTabOut[[i]][order(-blatTabOut[[i]]$V12),]

topBlatHit<-NULL

for (i in 1:length(sortBlatTabOut)) topBlatHit[[i]] <- sortBlatTabOut[[i]][1,]

#Write out best hits for each genome
topBlatHitOut <- file("topBlatHit.out",open="a")
for (i in 1:length(topBlatHit)) {
  write.table(topBlatHit[[i]],file=topBlatHitOut,sep="\t",row.names=FALSE,col.names=FALSE,quote=FALSE)
}
close(topBlatHitOut)

#Read best hits file and process by serotype and best hit
blatResults <- read.delim("topBlatHit.out",header=F,sep="\t")
addtopBlatHitData <- cbind(data.df,blatResults)
print(addtopBlatHitData)
fastaID <- addtopBlatHitData$id

#Assign NT if length of alignment is <3000 i.e. no hit to database
NTresults <- subset(addtopBlatHitData,V4<3000)
nonNTresults <- subset(addtopBlatHitData,V4>3000)
if (nrow(NTresults) > 0) {
  NTresults$V13 <- "NT"
  NTout <- NTresults[,c(fastaID,"V13")]
} else if (nrow(NTresults)==0) {
  
  cat("No NT serotypes found","\n")
}

##########################################
## Extract serotypes for separate analyses
##########################################

sero6Results<-subset(nonNTresults, V1=="6A"|V1=="6B"|V1=="6Bii(6E)"|V1=="6F"|V1=="6G"|V1=="6C"|V1=="6D")
sero9Results<-subset(nonNTresults, V1=="9V"|V1=="9A")
sero7Results<-subset(nonNTresults, V1=="7A"|V1=="7F")
sero18Results<-subset(nonNTresults, V1=="18B"|V1=="18C")
sero33Results<-subset(nonNTresults, V1=="33A"|V1=="33F")
sero22Results<-subset(nonNTresults, V1=="22A"|V1=="22F")
sero11Results<-subset(nonNTresults, V1=="11A"|V1=="11D")
sero20Results<-subset(nonNTresults, V1=="20")
sero25Results<-subset(nonNTresults, V1=="25A"|V1=="25F")

print(sero6Results)
#Remaining serotype predictions to own variable for saving out later
resttoBlat <- nonNTresults[nonNTresults$V1!="6A"&nonNTresults$V1!="6B"&nonNTresults$V1!="6Bii(6E)"&nonNTresults$V1!="6F"&nonNTresults$V1!="6G"&nonNTresults$V1!="6C"&nonNTresults$V1!="6D"&nonNTresults$V1!="9V"&nonNTresults$V1!="9A"&nonNTresults$V1!="7A"&nonNTresults$V1!="7F"&nonNTresults$V1!="18B"&nonNTresults$V1!="18C"&nonNTresults$V1!="33A"&nonNTresults$V1!="33F"&nonNTresults$V1!="22A"&nonNTresults$V1!="22F"&nonNTresults$V1!="11A"&nonNTresults$V1!="11D"&nonNTresults$V1!="20"&nonNTresults$V1!="25A"&nonNTresults$V1!="25F",]
resttoBlatOut <- resttoBlat[,c("id","V1")]

#Serogroup 6 identification
  fasta6 <- sero6Results$filePath
  tab6 <- paste(fasta6,".6.tab",sep="")
  n6 <- length(fasta6)
  print(tab6)
  #Identify 6C and 6D
  for (i in 1:n6) {
    RunBlastall(BARef = assign6CDref, BAquerySeqs = fasta6[[i]], blastAllout = tab6[[i]])    
  }

